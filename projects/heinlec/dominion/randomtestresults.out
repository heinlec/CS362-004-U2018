----------------- Testing Card: Adventurer ----------------
Total number of passes: 0 out of 2000
Total number of failures: 2000 out of 2000
----------------- Testing Card: Smithy ----------------
Total number of passes: 0 out of  2000
Total number of failures: 2000 out of 2000
----------------- Testing Card: Salvager ----------------
Total number of passes when choosing to gain coins: 997
Total number of  failures when choosing to gain coins: 0
Total number of passes when choosing to discard a card: 0
Total number of failures when choosing to discard a card: 1003
Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:92.31% of 13
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
No calls

Function 'cardEffect'
Lines executed:6.42% of 187
Branches executed:15.03% of 153
Taken at least once:3.27% of 153
Calls executed:7.55% of 53

Function 'salvagerCard'
Lines executed:100.00% of 7
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 4

Function 'ambassadorCard'
Lines executed:0.00% of 22
Branches executed:0.00% of 26
Taken at least once:0.00% of 26
Calls executed:0.00% of 3

Function 'stewardCard'
Lines executed:0.00% of 9
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
Calls executed:0.00% of 4

Function 'adventurerCard'
Lines executed:100.00% of 17
Branches executed:100.00% of 10
Taken at least once:90.00% of 10
Calls executed:100.00% of 2

Function 'smithyCard'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'getCost'
Lines executed:10.00% of 30
Branches executed:100.00% of 28
Taken at least once:3.57% of 28
No calls

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 3
No branches
Calls executed:100.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:87.10% of 62
Branches executed:100.00% of 46
Taken at least once:82.61% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:29.87% of 559
Branches executed:34.46% of 415
Taken at least once:20.48% of 415
Calls executed:22.34% of 94
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 551814 returned 100% blocks executed 83%
   551814:    8:int compare(const void* a, const void* b) {
   551814:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
   551814:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
    48000:   12:    return -1;
   503814:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 6000 returned 100% blocks executed 91%
     6000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     6000:   44:  SelectStream(1);
call    0 returned 100%
     6000:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     6000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
     2000:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     4000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    44000:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   440000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   400000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     4000:   73:  if (numPlayers == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
     4000:   77:  else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:    {
     4000:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     4000:   87:  if (numPlayers == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
     4000:   95:      state->supplyCount[estate] = 12;
     4000:   96:      state->supplyCount[duchy] = 12;
     4000:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     4000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     4000:  102:  state->supplyCount[silver] = 40;
     4000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    84000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   660000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   620000:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    40000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
        -:  114:		{
     4000:  115:		  if (numPlayers == 2){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
     2000:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    38000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    40000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   580000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    16000:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:    {
    12000:  140:      state->deckCount[i] = 0;
    48000:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
    36000:  143:	  state->deck[i][j] = estate;
    36000:  144:	  state->deckCount[i]++;
        -:  145:	}
    96000:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    84000:  148:	  state->deck[i][j] = copper;
    84000:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    16000:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  155:    {
    12000:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    16000:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    12000:  166:      state->handCount[i] = 0;
    12000:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   112000:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
   108000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     4000:  182:  state->outpostPlayed = 0;
     4000:  183:  state->phase = 0;
     4000:  184:  state->numActions = 1;
     4000:  185:  state->numBuys = 1;
     4000:  186:  state->playedCardCount = 0;
     4000:  187:  state->whoseTurn = 0;
     4000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    24000:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    20000:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
     4000:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
     4000:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 24124 returned 100% blocks executed 100%
    24124:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    24124:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    24124:  209:  if (state->deckCount[player] < 1)
branch  0 taken 42% (fallthrough)
branch  1 taken 58%
    10125:  210:    return -1;
    13999:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   273935:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
   245937:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
   245937:  216:    newDeck[newDeckPos] = state->deck[player][card];
   245937:  217:    newDeckPos++;
  2450984:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
  2205047:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
   245937:  221:    state->deckCount[player]--;
        -:  222:  }
   259936:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
   245937:  224:    state->deck[player][i] = newDeck[i];
   245937:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    13999:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 1994 returned 100% blocks executed 100%
     1994:  315:int handCard(int handPos, struct gameState *state) {
     1994:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     1994:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 7994 returned 100% blocks executed 100%
     7994:  346:int whoseTurn(struct gameState *state) {
     7994:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 154000 returned 100% blocks executed 100%
   154000:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   154000:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
   131999:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
   125937:  534:      state->deck[player][i] = state->discard[player][i];
   125937:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     6062:  538:    state->deckCount[player] = state->discardCount[player];
     6062:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     6062:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     6062:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     6062:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     6062:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     6062:  559:    if (deckCounter == 0)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
     4063:  560:      return -1;
        -:  561:
     1999:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     1999:  563:    state->deckCount[player]--;
     1999:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   147938:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   147938:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   147938:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   147938:  576:    state->deckCount[player]--;
   147938:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   149937:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 1994 returned 100% blocks executed 10%
     1994:  583:int getCost(int cardNumber)
        -:  584:{
     1994:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 100%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
     1994:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646://refactored cards start here
        -:  647:
        -:  648://***Smithy Card Refactored Function
        -:  649:// * Bug: changed the incrementer i to initialize at 1 rather than 0, player will only 
        -:  650://   *      draw two cards rather than three */
function smithyCard called 2000 returned 100% blocks executed 100%
     2000:  651:int smithyCard(int currentPlayer, struct gameState *state, int handPos) {
        -:  652:          //+3 Cards
     6000:  653:          for (int i = 1; i < 3; i++) //bug here, should be 1 = 0; i < 3; i++
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  654:          {
     4000:  655:          	drawCard(currentPlayer, state);     
call    0 returned 100%
        -:  656:          }
        -:  657:          //discard card from hand
     2000:  658:          discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     2000:  659:          return 0;
        -:  660:}
        -:  661:
        -:  662:/***Adventurer Card Refactored Function
        -:  663: * Bug: modified the treasure drawn statement to not include gold, meaning if a gold card
        -:  664: * is drawn the drawnTreasure counter will not be incremented. If gold is drawn the player could continue to draw cards */
function adventurerCard called 2000 returned 100% blocks executed 100%
     2000:  665:int adventurerCard(int currentPlayer, struct gameState *state, int temphand[] ) {
        -:  666:	//pulled from cardEffect()
     2000:  667:	int z = 0; //this is the counter for the temp hand
     2000:  668:	int drawntreasure = 0;
        -:  669:	int cardDrawn;
        -:  670:
   134000:  671:	while(drawntreasure<2){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
   130000:  672:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
     6062:  673:          shuffle(currentPlayer, state);
call    0 returned 100%
        -:  674:        }
   130000:  675:        drawCard(currentPlayer, state);
call    0 returned 100%
   130000:  676:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
   130000:  677:        if (cardDrawn == copper || cardDrawn == silver) // || cardDrawn == gold) //bug here, should include if gold is drawn increment drawnTreasure
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     4000:  678:          drawntreasure++;
        -:  679:        else{
   126000:  680:          temphand[z]=cardDrawn;
   126000:  681:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   126000:  682:          z++;
        -:  683:        }
        -:  684:      }
   130000:  685:      while(z-1>=0){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
   126000:  686:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
   126000:  687:        z=z-1;
        -:  688:      }
     2000:  689:      return 0;
        -:  690:}
        -:  691:
        -:  692:/***Steward Card Refactored Function
        -:  693: * Bug: if the player opts to draw two cards, they will only draw one rather than two as the 
        -:  694: * 	drawCard function is only called once*/
function stewardCard called 0 returned 0% blocks executed 0%
    #####:  695:int stewardCard(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3) {
    #####:  696:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  697:        {
        -:  698:          //+2 cards
    #####:  699:          drawCard(currentPlayer, state);
call    0 never executed
        -:  700:          //drawCard(currentPlayer, state);	//bug here, this function should be called twice 
        -:  701:        }
    #####:  702:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  703:        {
        -:  704:          //+2 coins
    #####:  705:          state->coins = state->coins + 2;
        -:  706:        }
        -:  707:      else
        -:  708:      {
        -:  709:        //trash 2 cards in hand  
    #####:  710:         discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  711:         discardCard(choice3, currentPlayer, state, 1);                                                          }
call    0 never executed
        -:  712:      //discard card from hand
    #####:  713:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  714:                                                                                                                return 0;
        -:  715:}
        -:  716:
        -:  717:/*Ambassador Card Refactored Function
        -:  718: * Bug: in the for loop where the other players gain a copy of the revealed card, the condition for i
        -:  719: * 	is checked if it is equal to the current player rather than not equal. This results in the 
        -:  720: * 	current player receiving the revealed card rather than the other players*/
function ambassadorCard called 0 returned 0% blocks executed 0%
    #####:  721:int ambassadorCard(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2) {
        -:  722:      int i;
    #####:  723:      int j = 0;		//used to check if player has enough cards to discard
        -:  724:
    #####:  725:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  726:	{
    #####:  727:	  return -1;				
        -:  728:	}
        -:  729:
    #####:  730:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  731:	{
    #####:  732:	  return -1;
        -:  733:	}
        -:  734:
    #####:  735:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  736:	{
    #####:  737:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  738:	    {
    #####:  739:	      j++;
        -:  740:	    }
        -:  741:	}
    #####:  742:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  743:	{
    #####:  744:	  return -1;				
        -:  745:	}
        -:  746:
        -:  747:      if (DEBUG) 
        -:  748:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  749:
        -:  750:      //increase supply count for choosen card by amount being discarded
    #####:  751:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  752:            			
        -:  753:      //each other player gains a copy of revealed card
    #####:  754:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  755:      {
    #####:  756:      	if (i == currentPlayer)	//bug here, should be i != currPlayer
branch  0 never executed
branch  1 never executed
        -:  757:      	{
    #####:  758:        	gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  759:   	}
        -:  760:      }
        -:  761:      
        -:  762:     //discard played card from hand
    #####:  763:     discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  764:     //trash copies of cards returned to supply
    #####:  765:     for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  766:     {
    #####:  767:     	for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  768:        {             		  	    
    #####:  769:		if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
    #####:  770:		{    		 	      	                		  	    	      				  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  771:    	       		 break;			            		  	    	      	    	                  }          			            		  	    	      	    	            }    		  	    	      				  		  		   }			
        -:  772:     
    #####:  773:return 0;
        -:  774:}
        -:  775:
        -:  776:/* Salvager Card Refactored Function
        -:  777: * NOTE: no bugs introduced in this function! This function is only refactored */
function salvagerCard called 2000 returned 100% blocks executed 100%
     2000:  778:int salvagerCard(int currentPlayer, struct gameState *state, int handPos, int choice1) {
        -:  779:      //+1 buy
     2000:  780:      state->numBuys++;
        -:  781:      
     2000:  782:      if (choice1)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  783:      {
        -:  784:     	 //gain coins equal to trashed card
      997:  785:    	 state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 returned 100%
call    1 returned 100%
        -:  786:   	//trash card
      997:  787:       	discardCard(choice1, currentPlayer, state, 1);	
call    0 returned 100%
        -:  788:      }
        -:  789:               			      		  	  	  	  				      //discard card
     2000:  790:     discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     2000:  791:     return 0;
        -:  792:}
        -:  793:
function cardEffect called 6000 returned 100% blocks executed 4%
     6000:  794:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  795:{
        -:  796:  int i;
        -:  797:  int j;
        -:  798:  int k;
        -:  799:  int x;
        -:  800:  int index;
     6000:  801:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     6000:  802:  int nextPlayer = currentPlayer + 1;
        -:  803:
     6000:  804:  int tributeRevealedCards[2] = {-1, -1};
        -:  805:  int temphand[MAX_HAND];// moved above the if statement
     6000:  806:  int drawntreasure=0;
        -:  807:  int cardDrawn;
     6000:  808:  int z = 0;// this is the counter for the temp hand
     6000:  809:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
     2000:  810:    nextPlayer = 0;
        -:  811:  }
        -:  812:	
        -:  813:  //uses switch to select card and perform actions
     6000:  814:  switch( card ) 
branch  0 taken 33%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 33%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 33%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  815:    {
        -:  816:    case adventurer:
        -:  817:	//call buggy function
     2000:  818:      return adventurerCard(currentPlayer, state, temphand);
call    0 returned 100%
        -:  819:			
        -:  820:    case council_room:
        -:  821:      //+4 Cards
    #####:  822:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  823:	{
    #####:  824:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  825:	}
        -:  826:			
        -:  827:      //+1 Buy
    #####:  828:      state->numBuys++;
        -:  829:			
        -:  830:      //Each other player draws a card
    #####:  831:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  832:	{
    #####:  833:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  834:	    {
    #####:  835:	      drawCard(i, state);
call    0 never executed
        -:  836:	    }
        -:  837:	}
        -:  838:			
        -:  839:      //put played card in played card pile
    #####:  840:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  841:			
    #####:  842:      return 0;
        -:  843:			
        -:  844:    case feast:
        -:  845:      //gain card with cost up to 5
        -:  846:      //Backup hand
    #####:  847:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  848:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  849:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  850:      }
        -:  851:      //Backup hand
        -:  852:
        -:  853:      //Update Coins for Buy
    #####:  854:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  855:      x = 1;//Condition to loop on
    #####:  856:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  857:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  858:	  if (DEBUG)
        -:  859:	    printf("None of that card left, sorry!\n");
        -:  860:
        -:  861:	  if (DEBUG){
        -:  862:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  863:	  }
        -:  864:	}
    #####:  865:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  866:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  867:
        -:  868:	  if (DEBUG){
        -:  869:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  870:	  }
        -:  871:	}
        -:  872:	else{
        -:  873:
        -:  874:	  if (DEBUG){
        -:  875:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  876:	  }
        -:  877:
    #####:  878:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  879:	  x = 0;//No more buying cards
        -:  880:
        -:  881:	  if (DEBUG){
        -:  882:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  883:	  }
        -:  884:
        -:  885:	}
        -:  886:      }     
        -:  887:
        -:  888:      //Reset Hand
    #####:  889:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  890:	state->hand[currentPlayer][i] = temphand[i];
    #####:  891:	temphand[i] = -1;
        -:  892:      }
        -:  893:      //Reset Hand
        -:  894:      			
    #####:  895:      return 0;
        -:  896:			
        -:  897:    case gardens:
    #####:  898:      return -1;
        -:  899:			
        -:  900:    case mine:
    #####:  901:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  902:
    #####:  903:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  904:	{
    #####:  905:	  return -1;
        -:  906:	}
        -:  907:		
    #####:  908:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  909:	{
    #####:  910:	  return -1;
        -:  911:	}
        -:  912:
    #####:  913:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  914:	{
    #####:  915:	  return -1;
        -:  916:	}
        -:  917:
    #####:  918:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  919:
        -:  920:      //discard card from hand
    #####:  921:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  922:
        -:  923:      //discard trashed card
    #####:  924:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  925:	{
    #####:  926:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  927:	    {
    #####:  928:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  929:	      break;
        -:  930:	    }
        -:  931:	}
        -:  932:			
    #####:  933:      return 0;
        -:  934:			
        -:  935:    case remodel:
    #####:  936:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  937:
    #####:  938:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  939:	{
    #####:  940:	  return -1;
        -:  941:	}
        -:  942:
    #####:  943:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  944:
        -:  945:      //discard card from hand
    #####:  946:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  947:
        -:  948:      //discard trashed card
    #####:  949:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  950:	{
    #####:  951:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  952:	    {
    #####:  953:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  954:	      break;
        -:  955:	    }
        -:  956:	}
        -:  957:
        -:  958:
    #####:  959:      return 0;
        -:  960:		
        -:  961:    case smithy:
        -:  962:      //call buggy function
     2000:  963:      return smithyCard(currentPlayer, state, handPos);
call    0 returned 100%
        -:  964:		
        -:  965:    case village:
        -:  966:      //+1 Card
    #####:  967:      drawCard(currentPlayer, state);
call    0 never executed
        -:  968:			
        -:  969:      //+2 Actions
    #####:  970:      state->numActions = state->numActions + 2;
        -:  971:			
        -:  972:      //discard played card from hand
    #####:  973:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  974:      return 0;
        -:  975:		
        -:  976:    case baron:
    #####:  977:      state->numBuys++;//Increase buys by 1!
    #####:  978:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  979:	int p = 0;//Iterator for hand!
    #####:  980:	int card_not_discarded = 1;//Flag for discard set!
    #####:  981:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  982:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  983:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  984:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  985:	    state->discardCount[currentPlayer]++;
    #####:  986:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  987:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  988:	    }
    #####:  989:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  990:	    state->handCount[currentPlayer]--;
    #####:  991:	    card_not_discarded = 0;//Exit the loop
        -:  992:	  }
    #####:  993:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  994:	    if(DEBUG) {
        -:  995:	      printf("No estate cards in your hand, invalid choice\n");
        -:  996:	      printf("Must gain an estate if there are any\n");
        -:  997:	    }
    #####:  998:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  999:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1000:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1001:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1002:		isGameOver(state);
call    0 never executed
        -: 1003:	      }
        -: 1004:	    }
    #####: 1005:	    card_not_discarded = 0;//Exit the loop
        -: 1006:	  }
        -: 1007:			    
        -: 1008:	  else{
    #####: 1009:	    p++;//Next card
        -: 1010:	  }
        -: 1011:	}
        -: 1012:      }
        -: 1013:			    
        -: 1014:      else{
    #####: 1015:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1016:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1017:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1018:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1019:	    isGameOver(state);
call    0 never executed
        -: 1020:	  }
        -: 1021:	}
        -: 1022:      }
        -: 1023:	    
        -: 1024:      
    #####: 1025:      return 0;
        -: 1026:		
        -: 1027:    case great_hall:
        -: 1028:      //+1 Card
    #####: 1029:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1030:			
        -: 1031:      //+1 Actions
    #####: 1032:      state->numActions++;
        -: 1033:			
        -: 1034:      //discard card from hand
    #####: 1035:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1036:      return 0;
        -: 1037:		
        -: 1038:    case minion:
        -: 1039:      //+1 action
    #####: 1040:      state->numActions++;
        -: 1041:			
        -: 1042:      //discard card from hand
    #####: 1043:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1044:			
    #####: 1045:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1046:	{
    #####: 1047:	  state->coins = state->coins + 2;
        -: 1048:	}
        -: 1049:			
    #####: 1050:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1051:	{
        -: 1052:	  //discard hand
    #####: 1053:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1054:	    {
    #####: 1055:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1056:	    }
        -: 1057:				
        -: 1058:	  //draw 4
    #####: 1059:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1060:	    {
    #####: 1061:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1062:	    }
        -: 1063:				
        -: 1064:	  //other players discard hand and redraw if hand size > 4
    #####: 1065:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1066:	    {
    #####: 1067:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1068:		{
    #####: 1069:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1070:		    {
        -: 1071:		      //discard hand
    #####: 1072:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1073:			{
    #####: 1074:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1075:			}
        -: 1076:							
        -: 1077:		      //draw 4
    #####: 1078:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1079:			{
    #####: 1080:			  drawCard(i, state);
call    0 never executed
        -: 1081:			}
        -: 1082:		    }
        -: 1083:		}
        -: 1084:	    }
        -: 1085:				
        -: 1086:	}
    #####: 1087:      return 0;
        -: 1088:		
        -: 1089:    case steward:
        -: 1090:	//call buggy function
    #####: 1091:      return stewardCard(currentPlayer, state, handPos, choice1, choice2, choice3);
call    0 never executed
        -: 1092:		
        -: 1093:    case tribute:
    #####: 1094:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1095:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1096:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1097:	  state->deckCount[nextPlayer]--;
        -: 1098:	}
    #####: 1099:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1100:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1101:	  state->discardCount[nextPlayer]--;
        -: 1102:	}
        -: 1103:	else{
        -: 1104:	  //No Card to Reveal
        -: 1105:	  if (DEBUG){
        -: 1106:	    printf("No cards to reveal\n");
        -: 1107:	  }
        -: 1108:	}
        -: 1109:      }
        -: 1110:	    
        -: 1111:      else{
    #####: 1112:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1113:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1114:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1115:	    state->deckCount[nextPlayer]++;
    #####: 1116:	    state->discard[nextPlayer][i] = -1;
    #####: 1117:	    state->discardCount[nextPlayer]--;
        -: 1118:	  }
        -: 1119:			    
    #####: 1120:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1121:	} 
    #####: 1122:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1123:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1124:	state->deckCount[nextPlayer]--;
    #####: 1125:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1126:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1127:	state->deckCount[nextPlayer]--;
        -: 1128:      }    
        -: 1129:		       
    #####: 1130:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1131:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1132:	state->playedCardCount++;
    #####: 1133:	tributeRevealedCards[1] = -1;
        -: 1134:      }
        -: 1135:
    #####: 1136:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1137:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1138:	  state->coins += 2;
        -: 1139:	}
        -: 1140:		    
    #####: 1141:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1142:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1143:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1144:	}
        -: 1145:	else{//Action Card
    #####: 1146:	  state->numActions = state->numActions + 2;
        -: 1147:	}
        -: 1148:      }
        -: 1149:	    
    #####: 1150:      return 0;
        -: 1151:		
        -: 1152:    case ambassador:
        -: 1153:     //call buggy function 
    #####: 1154:      return ambassadorCard(currentPlayer, state, handPos, choice1, choice2);
call    0 never executed
        -: 1155:		
        -: 1156:    case cutpurse:
        -: 1157:
    #####: 1158:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1159:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1160:	{
    #####: 1161:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1162:	    {
    #####: 1163:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1164:		{
    #####: 1165:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1166:		    {
    #####: 1167:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1168:		      break;
        -: 1169:		    }
    #####: 1170:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1171:		    {
    #####: 1172:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1173:			{
        -: 1174:			  if (DEBUG)
        -: 1175:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1176:			}	
    #####: 1177:		      break;
        -: 1178:		    }		
        -: 1179:		}
        -: 1180:					
        -: 1181:	    }
        -: 1182:				
        -: 1183:	}				
        -: 1184:
        -: 1185:      //discard played card from hand
    #####: 1186:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1187:
    #####: 1188:      return 0;
        -: 1189:
        -: 1190:		
        -: 1191:    case embargo: 
        -: 1192:      //+2 Coins
    #####: 1193:      state->coins = state->coins + 2;
        -: 1194:			
        -: 1195:      //see if selected pile is in play
    #####: 1196:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1197:	{
    #####: 1198:	  return -1;
        -: 1199:	}
        -: 1200:			
        -: 1201:      //add embargo token to selected supply pile
    #####: 1202:      state->embargoTokens[choice1]++;
        -: 1203:			
        -: 1204:      //trash card
    #####: 1205:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1206:      return 0;
        -: 1207:		
        -: 1208:    case outpost:
        -: 1209:      //set outpost flag
    #####: 1210:      state->outpostPlayed++;
        -: 1211:			
        -: 1212:      //discard card
    #####: 1213:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1214:      return 0;
        -: 1215:		
        -: 1216:    case salvager:
        -: 1217:      //call NON-buggy function
     2000: 1218:      return salvagerCard(currentPlayer, state, handPos, choice1);
call    0 returned 100%
        -: 1219:		
        -: 1220:    case sea_hag:
    #####: 1221:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1222:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1223:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1224:	  state->discardCount[i]++;
    #####: 1225:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1226:	}
        -: 1227:      }
    #####: 1228:      return 0;
        -: 1229:		
        -: 1230:    case treasure_map:
        -: 1231:      //search hand for another treasure_map
    #####: 1232:      index = -1;
    #####: 1233:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1234:	{
    #####: 1235:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1236:	    {
    #####: 1237:	      index = i;
    #####: 1238:	      break;
        -: 1239:	    }
        -: 1240:	}
    #####: 1241:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1242:	{
        -: 1243:	  //trash both treasure cards
    #####: 1244:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1245:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1246:
        -: 1247:	  //gain 4 Gold cards
    #####: 1248:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1249:	    {
    #####: 1250:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1251:	    }
        -: 1252:				
        -: 1253:	  //return success
    #####: 1254:	  return 1;
        -: 1255:	}
        -: 1256:			
        -: 1257:      //no second treasure_map found in hand
    #####: 1258:      return -1;
        -: 1259:    }
        -: 1260:	
    #####: 1261:  return -1;
        -: 1262:}
        -: 1263:
function discardCard called 4997 returned 100% blocks executed 89%
     4997: 1264:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1265:{
        -: 1266:	
        -: 1267:  //if card is not trashed, added to Played pile 
     4997: 1268:  if (trashFlag < 1)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1269:    {
        -: 1270:      //add card to played pile
     4000: 1271:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     4000: 1272:      state->playedCardCount++;
        -: 1273:    }
        -: 1274:	
        -: 1275:  //set played card to -1
     4997: 1276:  state->hand[currentPlayer][handPos] = -1;
        -: 1277:	
        -: 1278:  //remove card from player's hand
     4997: 1279:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -: 1280:    {
        -: 1281:      //reduce number of cards in hand
      358: 1282:      state->handCount[currentPlayer]--;
        -: 1283:    }
     4639: 1284:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1285:    {
        -: 1286:      //reduce number of cards in hand
    #####: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:  else 	
        -: 1290:    {
        -: 1291:      //replace discarded card with last card in hand
     4639: 1292:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1293:      //set last card to -1
     4639: 1294:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1295:      //reduce number of cards in hand
     4639: 1296:      state->handCount[currentPlayer]--;
        -: 1297:    }
        -: 1298:	
     4997: 1299:  return 0;
        -: 1300:}
        -: 1301:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1302:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1303:{
        -: 1304:  //Note: supplyPos is enum of choosen card
        -: 1305:	
        -: 1306:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1307:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1308:    {
    #####: 1309:      return -1;
        -: 1310:    }
        -: 1311:	
        -: 1312:  //added card for [whoseTurn] current player:
        -: 1313:  // toFlag = 0 : add to discard
        -: 1314:  // toFlag = 1 : add to deck
        -: 1315:  // toFlag = 2 : add to hand
        -: 1316:
    #####: 1317:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1318:    {
    #####: 1319:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1320:      state->deckCount[player]++;
        -: 1321:    }
    #####: 1322:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1323:    {
    #####: 1324:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1325:      state->handCount[player]++;
        -: 1326:    }
        -: 1327:  else
        -: 1328:    {
    #####: 1329:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1330:      state->discardCount[player]++;
        -: 1331:    }
        -: 1332:	
        -: 1333:  //decrease number in supply pile
    #####: 1334:  state->supplyCount[supplyPos]--;
        -: 1335:	 
    #####: 1336:  return 0;
        -: 1337:}
        -: 1338:
function updateCoins called 4000 returned 100% blocks executed 82%
     4000: 1339:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1340:{
        -: 1341:  int i;
        -: 1342:	
        -: 1343:  //reset coin count
     4000: 1344:  state->coins = 0;
        -: 1345:
        -: 1346:  //add coins for each Treasure card in player's hand
    24000: 1347:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1348:    {
    20000: 1349:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1350:	{
    16000: 1351:	  state->coins += 1;
        -: 1352:	}
     4000: 1353:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1354:	{
    #####: 1355:	  state->coins += 2;
        -: 1356:	}
     4000: 1357:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1358:	{
    #####: 1359:	  state->coins += 3;
        -: 1360:	}	
        -: 1361:    }	
        -: 1362:
        -: 1363:  //add bonus
     4000: 1364:  state->coins += bonus;
        -: 1365:
     4000: 1366:  return 0;
        -: 1367:}
        -: 1368:
        -: 1369:
        -: 1370://end of dominion.c
        -: 1371:
